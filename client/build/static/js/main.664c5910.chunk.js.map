{"version":3,"sources":["hooks/http.js","hooks/message.js","context/AuthContext.js","components/Answer.js","components/Progress.js","pages/TestPage.js","pages/AboutPage.js","components/Loader.js","App.js","hooks/auth.js","routes.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","res","json","data","ok","Error","message","clearError","useMessage","text","window","M","toast","html","empty","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Answer","answer","index","answered","clickAnswer","isRight","indexOf","color","className","key","onClick","style","borderRadius","border","padding","margin","width","maxWidth","cursor","background","transition","replace","Progress","start","stop","average","Math","floor","size","ProgressBar","marginBottom","striped","now","variant","label","TestPage","props","auth","useContext","n","setN","question","setQuestion","setAnswered","setQuestions","setStart","setStop","fetchBilet","fetched","console","log","hint","split","map","val","slice","join","history","push","useEffect","e","preventDefault","newAnswered","parseInt","target","getAttribute","Authorization","loadN","probs","max","mScore","interval","min","clickNext","marginTop","marginLeft","marginRight","ButtonToolbar","aria-label","ButtonGroup","Button","textAlign","img","length","src","alt","display","answers","i","AboutPage","loginHandler","href","Loader","justifyContent","paddingTop","App","setToken","ready","setReady","setUserId","jwtToken","id","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","render","routeProps","exact","to","useRoutes","Provider","value","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.664c5910.chunk.js","sourcesContent":["\r\nimport {useCallback, useState} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true);\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body);\r\n                headers['Content-Type'] = 'application/json';\r\n            }\r\n\r\n            const res = await fetch(url, {method, body, headers});\r\n            const data = await res.json();\r\n\r\n            if (!res.ok) {\r\n                throw new Error(data.message || 'Unknown error');\r\n            }\r\n\r\n            setLoading(false);\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n};","import {useCallback} from 'react'\r\n\r\nexport const useMessage = () => {\r\n    return useCallback(text => {\r\n        if (window.M && text) {\r\n            window.M.toast({html: text});\r\n        }\r\n    }, [])\r\n};","import {createContext} from 'react'\r\n\r\nfunction empty() {}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: empty,\r\n    logout : empty,\r\n    isAuthenticated: false\r\n});","import React from 'react';\r\n\r\n/*\r\nКомпонент варианта ответа\r\n */\r\n\r\nexport const Answer = ({answer, index, answered, clickAnswer}) => {\r\n    const isRight = answer.indexOf('@') !== -1;\r\n    const color =\r\n        (answered === null) && '#fff' ||\r\n        (answered === index && isRight) && '#66ff66' ||\r\n        (answered === index && !isRight) && '#bbbbbb' ||\r\n        (answered !== index && isRight) && '#ff6666' ||\r\n        '#fff';\r\n    return (\r\n        <li className=\"answer\" key={index} index={index} onClick={clickAnswer}\r\n            style={{\r\n               borderRadius: '0.5rem', border: '1px solid #000', padding: '0.8rem', margin: '0.5rem auto', width: '100%'/*, minWidth: 'fit-content'*/, maxWidth: '600px',\r\n               cursor: (answered === null) && 'pointer' || 'default', background: color, transition: '0.2s linear'\r\n            }}>{`${index}) ${answer.replace('@ ', '')}`}</li>\r\n    );\r\n};","import React from 'react';\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\n/*\r\nКомпонент варианта ответа\r\n */\r\n\r\nexport const Progress = ({start, stop}) => {\r\n    const average = Math.floor((start + stop) / 2);\r\n    const size = Math.floor((stop - start) / 2);\r\n    return (\r\n        <>\r\n            <ProgressBar style={{marginBottom: '2rem'}}>\r\n                <ProgressBar striped now={start} key={1} />\r\n                <ProgressBar striped variant=\"success\" now={stop - start} key={2} label={`${average}±${size}%`}/>\r\n                <ProgressBar striped now={100 - stop} key={3} />\r\n            </ProgressBar>\r\n        </>\r\n    );\r\n};","import React, {useContext, useEffect, useState} from 'react';\r\nimport {useHttp} from \"../hooks/http\";\r\nimport {Answer} from \"../components/Answer\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useMessage} from '../hooks/message'\r\nimport {Progress} from \"../components/Progress\";\r\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n/*\r\nСтраница прохождения теста\r\n */\r\n\r\nexport const TestPage = (props) => {\r\n    const message = useMessage();\r\n    const auth = useContext(AuthContext);\r\n    const [n, setN] = useState(null);\r\n    const {loading, request} = useHttp();\r\n    const [question, setQuestion] = useState(null);\r\n    const [answered, setAnswered] = useState(null);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [start, setStart] = useState(27);\r\n    const [stop, setStop] = useState(89);\r\n\r\n    const fetchBilet = async () => {\r\n        try {\r\n            const fetched = await request(`/api/bilet/${n}`, 'GET');\r\n\r\n            console.log(fetched);\r\n            fetched.hint = fetched.hint.split('<a ').map(\r\n                (val) => val.slice(val.indexOf('>') + 1).replace('</a>', '')\r\n            ).join('');\r\n\r\n            props.history.push('/bilet/' + n);\r\n            setQuestion(fetched);\r\n        } catch (e) {}\r\n    };\r\n\r\n    const testHandler = async () => {\r\n        try {\r\n\r\n        } catch (e) {}\r\n    };\r\n\r\n    useEffect(() => {(n !== null) && fetchBilet()}, [n]);\r\n\r\n    const clickAnswer = async (e) => {\r\n        e.preventDefault();\r\n        if (answered === null) {\r\n            try {\r\n                const newAnswered = parseInt(e.target.getAttribute('index'));\r\n                setAnswered(newAnswered);\r\n                const answer = await request(`/api/answer/${n}&${newAnswered}`, 'GET', null, {\r\n                    Authorization: 'Bearer ' + auth.token\r\n                });\r\n                message(answer.message);\r\n            } catch (e) {\r\n                message(e.message);\r\n                if (e.message.indexOf('invalid') !== -1) {\r\n                    auth.logout();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const loadN = async() => {\r\n        try {\r\n            const fetched = await request(`/api/nextBilet`, 'GET', null, {\r\n                Authorization: 'Bearer ' + auth.token\r\n            });\r\n            console.log(fetched);\r\n            message(fetched.message);\r\n\r\n            if (fetched.message === 'user doesnt exists') {\r\n                auth.logout();\r\n                return;\r\n            }\r\n\r\n            setQuestions(fetched.probs.slice(0, 10));\r\n            setN(fetched.n);\r\n            setStart(Math.max(fetched.mScore - fetched.interval / 2, 0) * 100);\r\n            setStop(Math.min(fetched.mScore + fetched.interval / 2, 1) * 100);\r\n        } catch (e) {\r\n            console.log(e.message);\r\n            message(e.message);\r\n            if (e.message.indexOf('expired') !== -1) {\r\n                auth.logout();\r\n            }\r\n        }\r\n    };\r\n\r\n    /*const deleteAll = async() => {\r\n        try {\r\n            const fetched = await request(`/api/answer/delete`, 'GET');\r\n            message(fetched.message);\r\n        } catch (e) {\r\n            console.log(e.message);\r\n            message(e.message);\r\n            if (e.message.indexOf('expired') !== -1) {\r\n                auth.logout();\r\n            }\r\n        }\r\n    };*/\r\n\r\n    const clickNext = async(e) => {\r\n        e.preventDefault();\r\n        setAnswered(null);\r\n        await loadN();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (n === null) {\r\n            /*if (props.location.pathname.indexOf('/bilet/') !== -1) {\r\n                setN(props.location.pathname.split('/bilet/')[1]);\r\n\r\n                let questions = [];\r\n                for (let i = 0; i < 10; i++)\r\n                    questions.push([0, i]);\r\n                setQuestions(questions);\r\n            } else {\r\n                loadN();\r\n            }*/\r\n            loadN();\r\n        }\r\n    }, [n]);\r\n\r\n    const niceColor = (val) => {\r\n        return `rgb(${val * 255}, ${200 - Math.abs(val * 255 - 128) / 2}, 128)`;\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {question && question.question &&\r\n            <div className=\"col s6 offset-s3\" style={{marginTop: \"5%\"}}>\r\n                <div style={{width: 'fit-content', marginBottom: '1rem', marginLeft: 'auto', marginRight: '0'}}>\r\n                    <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n                        <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                            {/*<Button onClick={deleteAll}>Удалить данные</Button>*/} <Button onClick={auth.logout}>Удалить данные о прохождении</Button>\r\n                        </ButtonGroup>\r\n                    </ButtonToolbar>\r\n                    {/*{\r\n                        questions.map((pair) => <a className=\"waves-effect waves-light btn\" key={pair[1]}\r\n                                                   style={{margin: '0.5rem', backgroundColor: niceColor(pair[0])}}\r\n                                                   onClick={() => {setN(pair[1]); fetchBilet()}}>{pair[1]}</a>)\r\n                    }*/}\r\n                </div>\r\n                <Progress start={start} stop={stop}/>\r\n                <h5 style={{textAlign: 'center'}}>{question.question}</h5>\r\n                {question.img.length && <img src={`https://biletpdd.ru${question.img}`} alt=\"img\"\r\n                                             style={{display: 'block', maxWidth: '100%', margin: '0 auto', transition: '1s'}}/> || ''}\r\n                <ul>\r\n                    {question.answers.map((answer, i) => {\r\n                        return <Answer key={i} answer={answer} index={i} answered={answered}\r\n                                       clickAnswer={clickAnswer}/>\r\n                    })}\r\n                </ul>\r\n                {(answered !== null) && <p style={{textAlign: 'center'}}>{question.hint}</p>}\r\n                {answered !== null && <Button variant=\"primary\" size=\"lg\" style={{display: 'block', width: 'fit-content', margin: '0 auto', marginTop: '2rem', marginBottom: '5rem'}} onClick={clickNext}>Далее ></Button>}\r\n            </div>\r\n            || <h1>Loading...</h1>}\r\n        </>\r\n    )\r\n};","import React, {useContext, useEffect, useState} from 'react';\r\nimport {useHttp} from \"../hooks/http\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useMessage} from '../hooks/message'\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n\r\nexport const AboutPage = () => {\r\n    const message = useMessage();\r\n    const auth = useContext(AuthContext);\r\n    const [n, setN] = useState(null);\r\n    const {loading, request} = useHttp();\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/login_random', 'POST');\r\n            auth.login(data.token, data.userId);\r\n        } catch (e) {}\r\n    };\r\n\r\n    const clickLogin = (e) => {\r\n        e.preventDefault();\r\n        loginHandler();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h3 style={{textAlign: 'center'}}>Тренажер для подготовки к теоретическому экзамену ПДД</h3>\r\n            <div style={{margin: 'auto', width: 'fit-content'}}>\r\n                <br/>\r\n                <p>На этом сайте вы можете проверить себя на знание ПДД</p>\r\n                <p>Каждый ваш ответ анализируется системой, для того чтобы наиболее быстро выявить пробелы в знаниях</p>\r\n                <p>Система не собирает персональные данные</p>\r\n                <p>Нажмите кнопку \"Начать тест\" если вы хотите пройти тестирование и соглашаетесь на использование файлов cookie</p>\r\n                <p>Написать автору в telegram: <a href={\"https://teleg.run/operarus\"} target={\"blanc\"}>@operarus</a></p>\r\n            </div>\r\n            <Button variant=\"primary\" size=\"lg\" style={{display: 'block', width : '200px', margin: '40% auto'}} onClick={clickLogin}>\r\n                Пройти тест\r\n            </Button>\r\n            {/*<a className=\"waves-effect waves-light btn-large\" style={{display: 'block', width : '200px', margin: '40% auto'}} onClick={clickLogin}>Пройти тест</a>*/}\r\n        </>\r\n    )\r\n};","import React from 'react';\r\n\r\nexport const Loader = () => (\r\n    <div style={{display: 'flex', justifyContent: 'center', paddingTop: '2rem'}}>\r\n        <div className=\"preloader-wrapper active\">\r\n            <div className=\"spinner-layer spinner-red-only\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {useRoutes} from \"./routes\";\nimport {useAuth} from \"./hooks/auth\";\nimport {AuthContext} from \"./context/AuthContext\";\nimport {Navbar} from \"./components/Navbar\";\nimport {Loader} from \"./components/Loader\";\n\nfunction App(props) {\n    const {token, login, logout, userId, ready} = useAuth();\n    const isAuthenticated = !!token;\n    const routes = useRoutes(isAuthenticated, props);\n    if (!ready) {\n        return <Loader/>\n    }\n    return (\n        <AuthContext.Provider value={{\n            token, login, logout, userId, isAuthenticated\n        }}>\n            <Router>\n                {isAuthenticated && 0 && <Navbar/> || ''}\n                <div className=\"container\">\n                    {routes}\n                </div>\n            </Router>\n        </AuthContext.Provider>\n    );\n}\n\nexport default App;\n","\r\nimport {useState, useCallback, useEffect} from 'react'\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(null);\r\n    const [ready, setReady] = useState(false);\r\n    const [userId, setUserId] = useState(null);\r\n\r\n    const login = useCallback((jwtToken, id) => {\r\n        setToken(jwtToken);\r\n        setUserId(id);\r\n\r\n        localStorage.setItem('userData', JSON.stringify({\r\n            userId : id, token : jwtToken\r\n        }));\r\n    }, []);\r\n\r\n    const logout = useCallback(() => {\r\n        setToken(null);\r\n        setUserId(null);\r\n        localStorage.removeItem('userData');\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(localStorage.getItem('userData'));\r\n\r\n        if (data && data.token) {\r\n            login(data.token, data.userId);\r\n        }\r\n        setReady(true);\r\n    }, [login]);\r\n\r\n    return {login, logout, token, userId, ready};\r\n};","import React from 'react'\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\n\r\nimport {AuthPage} from \"./pages/AuthPage\";\r\nimport {TestPage} from \"./pages/TestPage\";\r\nimport {AboutPage} from \"./pages/AboutPage\";\r\n\r\n\r\n\r\nexport const useRoutes = (isAuthenticated, props) => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/\" render={routeProps => <TestPage {...props} {...routeProps}/>} exact/>\r\n                <Route path=\"/bilet/:id\" render={routeProps => <TestPage {...props} {...routeProps}/>}/>\r\n                <Redirect to=\"/\" />\r\n            </Switch>\r\n        )\r\n    } else {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/\" exact>\r\n                    <AboutPage/>\r\n                </Route>\r\n                <Redirect to=\"/\"/>\r\n            </Switch>\r\n        )\r\n    }\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}